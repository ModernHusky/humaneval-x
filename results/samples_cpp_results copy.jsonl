{"task_id": "CPP/0", "completion_id": 0, "test_code": "#include<stdlib.h>\r
#include<algorithm>\r
#include<string>\r
#include<climits>\r
#include<cstring>\r
#include<iostream>\r
\r
/*
Check if in given vector of numbers, are any two numbers closer to each other than
given threshold.
>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)
false
>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)
true
*/
#include<stdio.h>
#include<vector>
#include<math.h>
using namespace std;
bool has_close_elements(vector<float> numbers, float threshold){
    for(size_t i = 0; i < numbers.size(); i++){
        for(size_t j = i + 1; j < numbers.size(); j++){
            if(fabs(numbers[i] - numbers[j]) < threshold){
                return true;
            }
        }
    }
    return false;
}\r
#undef NDEBUG
#include<assert.h>
int main(){
    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};
    assert (has_close_elements(a, 0.3)==true);
    assert (has_close_elements(a, 0.05) == false);

    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);
    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);
    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);
    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);
    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);
    
}
", "prompt": "/*
Check if in given vector of numbers, are any two numbers closer to each other than
given threshold.
>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)
false
>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)
true
*/
#include<stdio.h>
#include<vector>
#include<math.h>
using namespace std;
bool has_close_elements(vector<float> numbers, float threshold){
", "generation": "    for(size_t i = 0; i < numbers.size(); i++){
        for(size_t j = i + 1; j < numbers.size(); j++){
            if(fabs(numbers[i] - numbers[j]) < threshold){
                return true;
            }
        }
    }
    return false;
}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/1", "completion_id": 0, "test_code": "#include<stdlib.h>\r
#include<algorithm>\r
#include<math.h>\r
#include<climits>\r
#include<cstring>\r
#include<iostream>\r
\r
/*
Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
separate those group into separate strings and return the vector of those.
Separate groups are balanced (each open brace is properly closed) and not nested within each other
Ignore any spaces in the input string.
>>> separate_paren_groups(\"( ) (( )) (( )( ))\")
{\"()\", \"(())\", \"(()())\"}
*/
#include<stdio.h>
#include<vector>
#include<string>
using namespace std;
vector<string> separate_paren_groups(string paren_string){
    vector<string> result;
    string current;
    int balance = 0;
    
    for(char ch : paren_string) {
        if(ch == ' '){
            continue;
        }
        if(ch == '(') {
            if(balance == 0 && !current.empty()) {
                result.push_back(current);
                current.clear();
            }
            balance++;
        }
        if(ch == ')') {
            balance--;
        }
        current += ch;
        
        if(balance == 0 && !current.empty()) {
            result.push_back(current);
            current.clear();
        }
    }
    
    return result;
}\r
#undef NDEBUG
#include<assert.h>
bool issame(vector<string> a,vector<string>b){
    if (a.size()!=b.size()) return false;
    for (int i=0;i<a.size();i++)
    {
    if (a[i]!=b[i]) return false;
    }
    return true;
}
int main(){  
    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));
    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));
    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));
    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));
}", "prompt": "/*
Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
separate those group into separate strings and return the vector of those.
Separate groups are balanced (each open brace is properly closed) and not nested within each other
Ignore any spaces in the input string.
>>> separate_paren_groups(\"( ) (( )) (( )( ))\")
{\"()\", \"(())\", \"(()())\"}
*/
#include<stdio.h>
#include<vector>
#include<string>
using namespace std;
vector<string> separate_paren_groups(string paren_string){
", "generation": "    vector<string> result;
    string current;
    int balance = 0;
    
    for(char ch : paren_string) {
        if(ch == ' '){
            continue;
        }
        if(ch == '(') {
            if(balance == 0 && !current.empty()) {
                result.push_back(current);
                current.clear();
            }
            balance++;
        }
        if(ch == ')') {
            balance--;
        }
        current += ch;
        
        if(balance == 0 && !current.empty()) {
            result.push_back(current);
            current.clear();
        }
    }
    
    return result;
}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/2", "completion_id": 0, "test_code": "#include<stdlib.h>\r
#include<algorithm>\r
#include<vector>\r
#include<string>\r
#include<climits>\r
#include<cstring>\r
#include<iostream>\r
\r
/*
Given a positive floating point number, it can be decomposed into
and integer part (largest integer smaller than given number) and decimals
(leftover part always smaller than 1).

Return the decimal part of the number.
>>> truncate_number(3.5)
0.5
*/
#include<stdio.h>
#include<math.h>
using namespace std;
float truncate_number(float number){
return number - int(number);
}\r
#undef NDEBUG
#include<assert.h>
int main(){
 assert (truncate_number(3.5) == 0.5); 
 assert (abs(truncate_number(1.33) - 0.33) < 1e-4);
  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);
}", "prompt": "/*
Given a positive floating point number, it can be decomposed into
and integer part (largest integer smaller than given number) and decimals
(leftover part always smaller than 1).

Return the decimal part of the number.
>>> truncate_number(3.5)
0.5
*/
#include<stdio.h>
#include<math.h>
using namespace std;
float truncate_number(float number){
", "generation": "return number - int(number);
}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/3", "completion_id": 0, "test_code": "#include<stdlib.h>\r
#include<algorithm>\r
#include<math.h>\r
#include<string>\r
#include<climits>\r
#include<cstring>\r
#include<iostream>\r
\r
/*
You\"re given a vector of deposit and withdrawal operations on a bank account that starts with
zero balance. Your task is to detect if at any point the balance of account falls below zero, and
at that point function should return true. Otherwise it should return false.
>>> below_zero({1, 2, 3})
false
>>> below_zero({1, 2, -4, 5})
true
*/
#include<stdio.h>
#include<vector>
using namespace std;
bool below_zero(vector<int> operations){
    int balance = 0;
    for (int operation : operations) {
        balance += operation;
        if (balance < 0) {
            return true;
        }
    }
    return false;
}\r
#undef NDEBUG
#include<assert.h>
int main(){
    assert (below_zero({}) == false);
    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);
    assert (below_zero({1, 2, -4, 5, 6}) == true);
    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);
    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);
    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);
}", "prompt": "/*
You\"re given a vector of deposit and withdrawal operations on a bank account that starts with
zero balance. Your task is to detect if at any point the balance of account falls below zero, and
at that point function should return true. Otherwise it should return false.
>>> below_zero({1, 2, 3})
false
>>> below_zero({1, 2, -4, 5})
true
*/
#include<stdio.h>
#include<vector>
using namespace std;
bool below_zero(vector<int> operations){
", "generation": "    int balance = 0;
    for (int operation : operations) {
        balance += operation;
        if (balance < 0) {
            return true;
        }
    }
    return false;
}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/4", "completion_id": 0, "test_code": "#include<stdlib.h>\r
#include<algorithm>\r
#include<string>\r
#include<climits>\r
#include<cstring>\r
#include<iostream>\r
\r
/*
For a given vector of input numbers, calculate Mean Absolute Deviation
around the mean of this dataset.
Mean Absolute Deviation is the average absolute difference between each
element and a centerpoint (mean in this case):
MAD = average | x - x_mean |
>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})
1.0
*/
#include<stdio.h>
#include<math.h>
#include<vector>
using namespace std;
float mean_absolute_deviation(vector<float> numbers){
    float sum = 0.0;
    float mean = 0.0;
    float mad = 0.0;

    for (float num : numbers) {
        sum += num;
    }

    mean = sum / numbers.size();

    for (float num : numbers) {
        mad += fabs(num - mean);
    }

    return mad / numbers.size();
}\r
#undef NDEBUG
#include<assert.h>
int main(){
    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);
    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);
    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);
}", "prompt": "/*
For a given vector of input numbers, calculate Mean Absolute Deviation
around the mean of this dataset.
Mean Absolute Deviation is the average absolute difference between each
element and a centerpoint (mean in this case):
MAD = average | x - x_mean |
>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})
1.0
*/
#include<stdio.h>
#include<math.h>
#include<vector>
using namespace std;
float mean_absolute_deviation(vector<float> numbers){
", "generation": "    float sum = 0.0;
    float mean = 0.0;
    float mad = 0.0;

    for (float num : numbers) {
        sum += num;
    }

    mean = sum / numbers.size();

    for (float num : numbers) {
        mad += fabs(num - mean);
    }

    return mad / numbers.size();
}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
