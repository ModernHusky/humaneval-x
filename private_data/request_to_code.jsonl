{"conversations":[{"from":"human","key":"Alice","value":"编写一个 C++ 函数计算一个数的阶乘。"},{"from":"gpt","value":"long long computeFactorial(int number) {\n    long long result = 1;\n    if (number < 0) return -1;\n    for (int i = 1; i <= number; ++i) {\n        result *= i;\n    }\n    return result;\n}"}]}
{"conversations":[{"from":"human","key":"Bob","value":"创建一个 C++ 函数检查字符串是否为回文。"},{"from":"gpt","value":"bool checkPalindrome(const string& str) {\n    string cleaned;\n    for (char c : str) cleaned += c;\n    for (size_t i = 0; i < cleaned.size() / 2; ++i) {\n        if (cleaned[i] != cleaned[cleaned.size() - 1 - i]) return false;\n    }\n    return true;\n}"}]}
{"conversations":[{"from":"human","key":"Charlie","value":"编写一个 C++ 函数查找数组中的最大元素。"},{"from":"gpt","value":"int getMaxElement(int* array, int length) {\n    int largest = INT_MIN;\n    for (int i = 0; i < length; ++i) {\n        largest = max(largest, array[i]);\n    }\n    return largest;\n}"}]}
{"conversations":[{"from":"human","key":"David","value":"实现一个 C++ 函数反转整数向量。"},{"from":"gpt","value":"void invertVector(vector<int>& numbers) {\n    for (size_t i = 0; i < numbers.size() / 2; ++i) {\n        int temp = numbers[i];\n        numbers[i] = numbers[numbers.size() - 1 - i];\n        numbers[numbers.size() - 1 - i] = temp;\n    }\n}"}]}
{"conversations":[{"from":"human","key":"Emma","value":"编写一个 C++ 函数计算一个数的各位数字之和。"},{"from":"gpt","value":"int digitSum(int value) {\n    int total = 0;\n    value = abs(value);\n    do {\n        total += value % 10;\n        value /= 10;\n    } while (value > 0);\n    return total;\n}"}]}
{"conversations":[{"from":"human","key":"Frank","value":"创建一个 C++ 函数检查一个数是否为素数。"},{"from":"gpt","value":"bool isNumberPrime(int num) {\n    if (num < 2) return false;\n    for (int divisor = 2; divisor <= sqrt(num); ++divisor) {\n        if (num % divisor == 0) return false;\n    }\n    return true;\n}"}]}
{"conversations":[{"from":"human","key":"Grace","value":"编写一个 C++ 函数计算第 n 个斐波那契数。"},{"from":"gpt","value":"long long getFibonacci(int index) {\n    if (index < 0) return 0;\n    if (index <= 1) return index;\n    vector<long long> fib(index + 1);\n    fib[0] = 0; fib[1] = 1;\n    for (int i = 2; i <= index; ++i) {\n        fib[i] = fib[i - 1] + fib[i - 2];\n    }\n    return fib[index];\n}"}]}
{"conversations":[{"from":"human","key":"Henry","value":"实现一个 C++ 函数统计字符串中某个字符的出现次数。"},{"from":"gpt","value":"int charFrequency(const string& text, char target) {\n    int occurrences = 0;\n    for (size_t i = 0; i < text.length(); ++i) {\n        if (text[i] == target) ++occurrences;\n    }\n    return occurrences;\n}"}]}
{"conversations":[{"from":"human","key":"Isabel","value":"编写一个 C++ 函数计算两个数的最大公约数。"},{"from":"gpt","value":"int findGCD(int x, int y) {\n    x = abs(x); y = abs(y);\n    if (y == 0) return x;\n    return findGCD(y, x % y);\n}"}]}
{"conversations":[{"from":"human","key":"Jack","value":"创建一个 C++ 函数将数组按升序排序。"},{"from":"gpt","value":"void selectionSort(int array[], int length) {\n    for (int i = 0; i < length - 1; ++i) {\n        int minIdx = i;\n        for (int j = i + 1; j < length; ++j) {\n            if (array[j] < array[minIdx]) minIdx = j;\n        }\n        if (minIdx != i) swap(array[i], array[minIdx]);\n    }\n}"}]}